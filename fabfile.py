import os
from fabric.api import task, local, lcd, env

if not 'DJANGO_SETTINGS_MODULE' in os.environ:
    exit("No DJANGO_SETTINGS_MODULE, aborting..")

try:
    env.project_name = os.environ.get('DJANGO_SETTINGS_MODULE').split('.')[0]
except:
    exit('Settings module not in expected format of .settings.')

@task
def prepare():
    if local('git status --porcelain', capture=True):
        exit("uncommitted files, aborting..")

    local('python manage.py collectstatic --noinput')
    with lcd('static/css'):
        local('lessc -x styles.less styles.css')

    local('cp static/css/styles.css %s/static/css/' % (env.project_name))

    if local('git status --porcelain', capture=True):
        local('git add %s/static/css/styles.css' % (env.project_name))
        local('git commit -m "Compile CSS (generated by Fabric)"')


def set_env(remote):
    if not remote in local('git remote', capture=True):
        exit("Please set git remote for heroku first")

    env.remote = remote

@task
def testing():
    set_env('testing')

@task
def production():
    set_env('production')

@task
def deploy():
    if not 'remote' in env:
        exit('incorrect usage, define environment: e.g. fab testing deploy')

    prepare()

    local('heroku pgbackups:capture --remote %s' % (env.remote))
    local('git push %s HEAD:master' % (env.remote))
    local('heroku run --remote %s "python manage.py migrate"' % (env.remote))
